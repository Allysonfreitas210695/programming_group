openapi: 3.0.3
info:
  title: My API
  version: 1.0.0
  description: API description
  contact:
    name: Your Name
    email: your.email@example.com
  license:
    name: License Name
    url: https://license.url
paths:
  /api/groupAdmins/{id}/add/:
    post:
      operationId: api_groupAdmins_add_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Group ID
        required: true
      tags:
      - Group Admins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAdmin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddAdmin'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          description: Admin added successfully
        '400':
          description: Bad request
        '404':
          description: Group or User not found
  /api/groupAdmins/{id}/admins/:
    get:
      operationId: api_groupAdmins_admins_list
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Group ID
        required: true
      tags:
      - Group Admins
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupAdmin'
          description: ''
        '404':
          description: Group not found
  /api/groupAdmins/{id}/remove/:
    post:
      operationId: api_groupAdmins_remove_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Group ID
        required: true
      tags:
      - Group Admins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveAdmin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RemoveAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RemoveAdmin'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: Admin removed successfully
        '400':
          description: Bad request
        '404':
          description: Group or User not found
  /api/notifications/:
    get:
      operationId: api_notifications_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
    post:
      operationId: api_notifications_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/{id}/:
    get:
      operationId: api_notifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: api_notifications_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    delete:
      operationId: api_notifications_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/programmingGroups/:
    get:
      operationId: api_programmingGroups_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProgrammingGroupList'
          description: ''
    post:
      operationId: api_programmingGroups_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgrammingGroup'
          description: ''
  /api/programmingGroups/{id}/:
    get:
      operationId: api_programmingGroups_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgrammingGroup'
          description: ''
    put:
      operationId: api_programmingGroups_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProgrammingGroup'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgrammingGroup'
          description: ''
    delete:
      operationId: api_programmingGroups_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenPair'
          description: ''
  /api/universitys/:
    get:
      operationId: api_universitys_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUniversityList'
          description: ''
    post:
      operationId: api_universitys_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/University'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/University'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
          description: ''
  /api/universitys/{id}/:
    get:
      operationId: api_universitys_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
          description: ''
    put:
      operationId: api_universitys_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/University'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/University'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
          description: ''
    delete:
      operationId: api_universitys_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    AddAdmin:
      type: object
      properties:
        group_id:
          type: string
          format: uuid
          writeOnly: true
        user_id:
          type: string
          format: uuid
          writeOnly: true
      required:
      - group_id
      - user_id
    CustomTokenPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    GroupAdmin:
      type: object
      properties:
        group:
          type: string
          format: uuid
        admin:
          type: string
          format: uuid
      required:
      - admin
      - group
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
        sender:
          type: string
          format: uuid
          nullable: true
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - message
      - notification_type
      - user
    NotificationTypeEnum:
      enum:
      - friend_request
      - group_invite
      - group_update
      type: string
      description: |-
        * `friend_request` - Friend Request
        * `group_invite` - Group Invite
        * `group_update` - Group Update
    PaginatedNotificationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedProgrammingGroupList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingGroup'
    PaginatedUniversityList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/University'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PrivacyEnum:
      enum:
      - public
      - private
      type: string
      description: |-
        * `public` - Public
        * `private` - Private
    ProgrammingGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        field_of_interest:
          type: string
          maxLength: 255
        technologies_used:
          type: string
        difficulty_level:
          type: integer
        image:
          type: string
          format: uri
          nullable: true
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        creator:
          type: string
          format: uuid
        participants:
          type: array
          items:
            type: string
            format: uuid
      required:
      - creator
      - description
      - difficulty_level
      - field_of_interest
      - id
      - technologies_used
      - title
    RemoveAdmin:
      type: object
      properties:
        group_id:
          type: string
          format: uuid
          writeOnly: true
        user_id:
          type: string
          format: uuid
          writeOnly: true
      required:
      - group_id
      - user_id
    StatusEnum:
      enum:
      - active
      - inactive
      type: string
      description: |-
        * `active` - Active
        * `inactive` - Inactive
    University:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        state:
          type: string
          maxLength: 2
      required:
      - id
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
          minLength: 3
        cpf:
          type: string
          pattern: ^[0-9]*$
          maxLength: 11
          minLength: 11
        email:
          type: string
          format: email
          maxLength: 254
        dateOfBirth:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/StatusEnum'
        password:
          type: string
          writeOnly: true
          title: Senha
          maxLength: 128
        university:
          type: string
          format: uuid
          nullable: true
      required:
      - cpf
      - dateOfBirth
      - email
      - id
      - name
      - password
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
